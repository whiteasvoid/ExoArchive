# Este arquivo gere a interface gr√°fica utilizando PyQt5
import sys
import requests
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QLineEdit, QLabel, QDialog, QGridLayout, QTextEdit, QScrollArea, QSpinBox
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QPixmap, QIcon
from src.database.database_handler import create_manifest_data
from src.api.manifest_manager import get_manifest
from src.api.item_search import search_items_by_name, get_item_details, search_items_by_type
from src.api.vendor_manager import display_xur_items, get_xur_inventory
from src.api.player_information import display_player_variables, display_player_characters
from components.style_manager import apply_style, apply_button_style

class DebugWindow(QDialog):
    """Janela de debug com uma √°rea de texto para sa√≠da"""
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Janela de Debug")
        self.setMinimumSize(600, 400)

        # Layout principal da janela de debug
        layout = QVBoxLayout()
        self.setLayout(layout)
        
        # √Årea de texto para sa√≠da de debug
        self.debug_output = QTextEdit()
        self.debug_output.setReadOnly(True)
        self.debug_output.setPlaceholderText("Sa√≠da de debug aparecer√° aqui...")
        apply_style(self.debug_output, "inputs")
        layout.addWidget(self.debug_output)
        
        # Bot√£o para limpar a √°rea de debug
        self.clear_debug_button = QPushButton("üóëÔ∏è Limpar Debug")
        self.clear_debug_button.clicked.connect(self.clear_debug)
        apply_button_style(self.clear_debug_button, "secondary")
        layout.addWidget(self.clear_debug_button)
        
    def clear_debug(self):
        """Limpa a √°rea de debug"""
        self.debug_output.clear()
        self.debug_output.append("‚ú® √Årea de debug limpa.")
        
    def append_debug(self, text):
        """Adiciona texto √† √°rea de debug"""
        if text.strip():
            self.debug_output.append(text.strip())

class ItemDetailsDialog(QDialog):
    """Janela de di√°logo para exibir detalhes de um item"""
    def __init__(self, item, parent=None, icon_cache=None):
        super().__init__(parent)
        self.setWindowTitle("Detalhes do Item")
        self.setGeometry(300, 300, 350, 250)
        self.icon_cache = icon_cache
        
        # Layout principal
        layout = QVBoxLayout()
        self.setLayout(layout)
        
        # √çcone do item
        self.icon_label = QLabel()
        self.icon_label.setFixedSize(64, 64)
        self.icon_label.setAlignment(Qt.AlignCenter)
        self.icon_label.setStyleSheet("border: 1px solid #ccc; background-color: #f0f0f0;")
        layout.addWidget(self.icon_label)
        
        # Informa√ß√µes do item
        propriedades = item.get('displayProperties', {})
        nome = propriedades.get('name', 'Desconhecido')
        tipo = item.get('itemTypeDisplayName', 'Tipo Desconhecido')
        nivel = item.get('inventory', {}).get('tierTypeName', 'N√≠vel Desconhecido')
        descricao = propriedades.get('description', 'Sem descri√ß√£o')
        hash_item = item.get('hash', 'Desconhecido')
        
        self.info_label = QLabel(
            f"<b>Nome:</b> {nome}<br>"
            f"<b>Hash:</b> {hash_item}<br>"
            f"<b>Tipo:</b> {tipo}<br>"
            f"<b>N√≠vel:</b> {nivel}<br>"
            f"<b>Descri√ß√£o:</b> {descricao}"
        )
        self.info_label.setWordWrap(True)
        apply_style(self.info_label, "labels")
        layout.addWidget(self.info_label)
        
        # Bot√£o para fechar
        self.close_button = QPushButton("Fechar")
        self.close_button.clicked.connect(self.close)
        apply_button_style(self.close_button, "secondary")
        layout.addWidget(self.close_button)
        
        # Carrega o √≠cone
        self.load_icon(item.get('icon_url', 'Sem √≠cone dispon√≠vel'))
    
    def load_icon(self, icon_url):
        """Carrega e exibe a imagem do √≠cone a partir do URL"""
        try:
            if icon_url and icon_url != "Sem √≠cone dispon√≠vel":
                # Verifica se o √≠cone est√° no cache
                if icon_url in self.icon_cache:
                    scaled_pixmap = self.icon_cache[icon_url]
                else:
                    response = requests.get(icon_url)
                    if response.status_code == 200:
                        pixmap = QPixmap()
                        pixmap.loadFromData(response.content)
                        scaled_pixmap = pixmap.scaled(64, 64, Qt.KeepAspectRatio)
                        self.icon_cache[icon_url] = scaled_pixmap  # Armazena no cache
                    else:
                        self.icon_label.setText("Erro")
                        return
                self.icon_label.setPixmap(scaled_pixmap)
            else:
                self.icon_label.setText("Sem √≠cone")
        except Exception as e:
            self.icon_label.setText("Erro")

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        # Cache para √≠cones
        self.icon_cache = {}
        
        # Define o t√≠tulo da janela
        self.setWindowTitle("ExoArchive - Destiny 2")
        
        # Define o tamanho inicial da janela
        self.setGeometry(100, 100, 800, 600)
        
        # Aplica o estilo da janela principal
        apply_style(self, "main_window")

        # Cria o widget central e o layout
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)
        main_layout.setSpacing(15)
        main_layout.setContentsMargins(20, 20, 20, 20)

        # Carrega os dados do manifesto
        self.manifest_data = create_manifest_data()

        # Layout para o t√≠tulo e o bot√£o de debug
        header_layout = QHBoxLayout()
        main_layout.addLayout(header_layout)
        
        # T√≠tulo principal da aplica√ß√£o
        self.main_title = QLabel("ExoArchive")
        self.main_title.setProperty("class", "title-label")
        apply_style(self.main_title, "labels")
        header_layout.addWidget(self.main_title)
        
        # Adiciona um espa√ßo expans√≠vel para empurrar o bot√£o de debug para a direita
        header_layout.addStretch()
        
        # Bot√£o de debug
        self.debug_button = QPushButton("üêû Debug")
        self.debug_button.clicked.connect(self.open_debug_window)
        apply_button_style(self.debug_button, "secondary")
        header_layout.addWidget(self.debug_button)

        # Subt√≠tulo
        self.subtitle = QLabel("Explorador de dados do Destiny 2")
        self.subtitle.setProperty("class", "subtitle-label")
        apply_style(self.subtitle, "labels")
        main_layout.addWidget(self.subtitle)

        # Se√ß√£o de pesquisa
        self.create_search_section(main_layout)
        
        # Se√ß√£o de bot√µes de a√ß√£o
        self.create_action_buttons(main_layout)

        # Se√ß√£o de resultados
        self.create_output_section(main_layout)

        # Vari√°veis tempor√°rias (substituir)
        self.membership_type = 1
        self.destiny_membership_id = "4611686018554152113"
        self.character_id = "2305843010708964224"
        
        # Inicializa a janela de debug (mas n√£o a exibe)
        self.debug_window = DebugWindow(self)

    def create_search_section(self, layout):
        """Cria a √°rea de pesquisa de itens"""
        # Layout para a pesquisa
        search_layout = QHBoxLayout()
        layout.addLayout(search_layout)
        
        # Label para a pesquisa
        self.search_label = QLabel("Procurar Item por Nome:")
        apply_style(self.search_label, "labels")
        search_layout.addWidget(self.search_label)

        # Campo de entrada para pesquisa
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("Ex: Gjallarhorn, Ace of Spades...")
        apply_style(self.search_input, "inputs")
        search_layout.addWidget(self.search_input)

        # Campo para limite de itens
        self.limit_label = QLabel("Limite de Itens:")
        apply_style(self.limit_label, "labels")
        search_layout.addWidget(self.limit_label)
        
        self.limit_input = QSpinBox()
        self.limit_input.setMinimum(1)
        self.limit_input.setMaximum(100)
        self.limit_input.setValue(20)  # Valor padr√£o
        apply_style(self.limit_input, "inputs")
        search_layout.addWidget(self.limit_input)

        # Bot√£o de pesquisa (estilo prim√°rio)
        self.search_button = QPushButton("üîç Procurar Item")
        self.search_button.clicked.connect(self.search_item)
        apply_button_style(self.search_button, "primary")
        layout.addWidget(self.search_button)

    def create_action_buttons(self, layout):
        """Cria os bot√µes de a√ß√£o"""
        # Label para a√ß√µes
        actions_label = QLabel("A√ß√µes Dispon√≠veis:")
        apply_style(actions_label, "labels")
        layout.addWidget(actions_label)

        # Bot√£o para informa√ß√µes do jogador
        self.player_button = QPushButton("üë§ Informa√ß√µes do Jogador")
        self.player_button.clicked.connect(self.show_player_info)
        apply_button_style(self.player_button, "secondary")
        layout.addWidget(self.player_button)

        # Bot√£o para itens do Xur
        self.xur_button = QPushButton("üõí Itens do Xur")
        self.xur_button.clicked.connect(self.show_xur_items)
        apply_button_style(self.xur_button, "success")
        layout.addWidget(self.xur_button)

    def create_output_section(self, layout):
        """Cria a √°rea de exibi√ß√£o de resultados"""
        # Label para resultados
        self.output_label = QLabel("Resultados:")
        apply_style(self.output_label, "labels")
        layout.addWidget(self.output_label)

        # √Årea de rolagem para a grade de √≠cones
        self.scroll_area = QScrollArea()
        self.scroll_area.setWidgetResizable(True)
        self.output_widget = QWidget()
        self.output_grid = QGridLayout()
        self.output_widget.setLayout(self.output_grid)
        self.scroll_area.setWidget(self.output_widget)
        apply_style(self.scroll_area, "images")  # Aplica estilo do images.css
        layout.addWidget(self.scroll_area)

        # Bot√£o para limpar resultados
        self.clear_button = QPushButton("üóëÔ∏è Limpar Resultados")
        self.clear_button.clicked.connect(self.clear_output)
        apply_button_style(self.clear_button, "secondary")
        layout.addWidget(self.clear_button)

    def load_icon_button(self, item, row, col):
        """Carrega um bot√£o com o √≠cone e nome do item na grade"""
        propriedades = item.get('displayProperties', {})
        nome = propriedades.get('name', 'Desconhecido')
        icon_url = item.get('icon_url', 'Sem √≠cone dispon√≠vel')
        
        # Cria um widget para o item
        item_widget = QWidget()
        item_layout = QVBoxLayout()
        item_layout.setSpacing(5)
        item_widget.setLayout(item_layout)
        
        # Bot√£o com o √≠cone
        icon_button = QPushButton()
        icon_button.setFixedSize(64, 64)
        apply_button_style(icon_button, "icon")  # Aplica estilo icon-button
        try:
            if icon_url and icon_url != "Sem √≠cone dispon√≠vel":
                # Verifica se o √≠cone est√° no cache
                if icon_url in self.icon_cache:
                    scaled_pixmap = self.icon_cache[icon_url]
                else:
                    response = requests.get(icon_url)
                    if response.status_code == 200:
                        pixmap = QPixmap()
                        pixmap.loadFromData(response.content)
                        scaled_pixmap = pixmap.scaled(64, 64, Qt.KeepAspectRatio)
                        self.icon_cache[icon_url] = scaled_pixmap  # Armazena no cache
                        self.debug_window.append_debug(f"√çcone carregado: {icon_url}")
                    else:
                        icon_button.setText("Erro")
                        self.debug_window.append_debug(f"Erro ao carregar √≠cone: {response.status_code}")
                        return
                icon_button.setIcon(QIcon(scaled_pixmap))
                icon_button.setIconSize(scaled_pixmap.size())
            else:
                icon_button.setText("Sem √≠cone")
                self.debug_window.append_debug("Nenhum √≠cone dispon√≠vel para exibir")
        except Exception as e:
            icon_button.setText("Erro")
            self.debug_window.append_debug(f"Erro ao carregar √≠cone: {str(e)}")
        
        # Conecta o clique do bot√£o √† exibi√ß√£o dos detalhes
        icon_button.clicked.connect(lambda: self.show_item_details(item))
        item_layout.addWidget(icon_button)
        
        # Nome do item
        name_label = QLabel(nome)
        name_label.setAlignment(Qt.AlignCenter)
        name_label.setWordWrap(True)
        name_label.setFixedWidth(80)
        apply_style(name_label, "labels")
        item_layout.addWidget(name_label)
        
        # Adiciona o widget √† grade
        self.output_grid.addWidget(item_widget, row, col)

    def show_item_details(self, item):
        """Exibe os detalhes do item em uma janela de di√°logo"""
        dialog = ItemDetailsDialog(item, self, self.icon_cache)
        dialog.exec_()

    def open_debug_window(self):
        """Abre a janela de debug"""
        self.debug_window.show()
        # Debug inicial
        self.debug_window.append_debug("Janela de debug aberta.")
        self.debug_window.append_debug(f"Dados do manifesto carregados: {bool(self.manifest_data)}")
        self.debug_window.append_debug(f"Membership Type: {self.membership_type}")
        self.debug_window.append_debug(f"Destiny Membership ID: {self.destiny_membership_id}")
        self.debug_window.append_debug(f"Character ID: {self.character_id}")

    def search_item(self):
        """Procura um item pelo nome e exibe os √≠cones na grade"""
        # Limpa a grade anterior
        self.clear_output()
        
        search_term = self.search_input.text().strip()
        limit = self.limit_input.value()  # Obt√©m o limite do QSpinBox
        
        if not search_term:
            self.debug_window.append_debug("‚ö†Ô∏è Por favor, insira um termo de pesquisa.")
            return

        self.debug_window.append_debug(f"Pesquisa iniciada: '{search_term}' (Limite: {limit})")

        # Redireciona a sa√≠da padr√£o para a janela de debug
        sys.stdout = TextRedirector(self.debug_window)
        try:
            found_items = search_items_by_name(self.manifest_data, search_term)
            if found_items:
                self.output_label.setText(f"Resultados: {len(found_items)} itens encontrados (mostrando at√© {limit})")
                # Adiciona os itens √† grade (4 colunas, respeitando o limite)
                for index, (id_hash, item) in enumerate(found_items[:limit]):
                    row = index // 4
                    col = index % 4
                    self.debug_window.append_debug(f"Carregando item {index + 1}/{min(limit, len(found_items))}: {item.get('displayProperties', {}).get('name', 'Desconhecido')}")
                    self.load_icon_button(item, row, col)
            else:
                self.output_label.setText("Resultados: Nenhum item encontrado")
        except Exception as e:
            self.debug_window.append_debug(f"‚ùå Erro na pesquisa: {str(e)}")
        finally:
            sys.stdout = sys.__stdout__  # Restaura a sa√≠da padr√£o

    def show_player_info(self):
        """Exibe informa√ß√µes do jogador na janela de debug"""
        self.clear_output()
        self.output_label.setText("Resultados: Informa√ß√µes do Jogador")
        self.debug_window.append_debug("Exibindo informa√ß√µes do jogador...")

        # Redireciona a sa√≠da padr√£o para a janela de debug
        sys.stdout = TextRedirector(self.debug_window)
        try:
            display_player_variables("cosmy", "0588")
            display_player_characters(self.membership_type, self.destiny_membership_id)
        except Exception as e:
            self.debug_window.append_debug(f"‚ùå Erro ao carregar informa√ß√µes: {str(e)}")
        finally:
            sys.stdout = sys.__stdout__  # Restaura a sa√≠da padr√£o

    def show_xur_items(self):
        """Exibe os itens dispon√≠veis do Xur na grade"""
        self.clear_output()
        limit = self.limit_input.value()  # Obt√©m o limite do QSpinBox
        self.output_label.setText("Resultados: Itens do Xur")
        self.debug_window.append_debug(f"Exibindo itens do Xur (Limite: {limit})")

        # Redireciona a sa√≠da padr√£o para a janela de debug
        sys.stdout = TextRedirector(self.debug_window)
        try:
            xur_data = get_xur_inventory(self.membership_type, self.destiny_membership_id, self.character_id)
            if xur_data and xur_data.get("sales", {}).get("data", {}):
                sales_data = xur_data["sales"]["data"]
                found_items = []
                for sale_item in sales_data.values():
                    item_hash = sale_item.get("itemHash")
                    if item_hash:
                        item = get_item_details(self.manifest_data, item_hash)
                        if item:
                            found_items.append((item_hash, item))
                if found_items:
                    self.output_label.setText(f"Resultados: {len(found_items)} itens do Xur (mostrando at√© {limit})")
                    # Adiciona os itens √† grade (4 colunas, respeitando o limite)
                    for index, (id_hash, item) in enumerate(found_items[:limit]):
                        row = index // 4
                        col = index % 4
                        self.debug_window.append_debug(f"Carregando item {index + 1}/{min(limit, len(found_items))}: {item.get('displayProperties', {}).get('name', 'Desconhecido')}")
                        self.load_icon_button(item, row, col)
                else:
                    self.output_label.setText("Resultados: Nenhum item do Xur encontrado")
            else:
                self.output_label.setText("Resultados: Nenhum item do Xur encontrado")
        except Exception as e:
            self.debug_window.append_debug(f"‚ùå Erro ao carregar itens do Xur: {str(e)}")
        finally:
            sys.stdout = sys.__stdout__  # Restaura a sa√≠da padr√£o

    def clear_output(self):
        """Limpa a grade de resultados"""
        # Remove todos os widgets da grade
        while self.output_grid.count():
            item = self.output_grid.takeAt(0)
            widget = item.widget()
            if widget:
                widget.deleteLater()
        self.output_label.setText("Resultados:")
        self.debug_window.append_debug("√Årea de resultados limpa.")

# Classe para redirecionar a sa√≠da padr√£o para a √°rea de texto
class TextRedirector:
    def __init__(self, text_widget):
        self.text_widget = text_widget

    def write(self, text):
        if text.strip():  # S√≥ adiciona texto n√£o vazio
            # Verifica se o widget √© uma DebugWindow e usa append_debug
            if hasattr(self.text_widget, 'append_debug'):
                self.text_widget.append_debug(text.strip())
            else:
                self.text_widget.append(text.strip())

    def flush(self):
        pass

# Classe para redirecionar a sa√≠da padr√£o para duas √°reas de texto
class DualTextRedirector:
    def __init__(self, main_widget, debug_widget):
        self.main_widget = main_widget
        self.debug_widget = debug_widget

    def write(self, text):
        if text.strip():  # S√≥ adiciona texto n√£o vazio
            # Verifica se o texto cont√©m palavras-chave de erro
            if any(keyword in text.lower() for keyword in ["erro", "‚ö†Ô∏è", "‚ùå"]):
                self.debug_widget.append_debug(text.strip())
            else:
                self.main_widget.append(text.strip())

    def flush(self):
        pass

# Fun√ß√£o principal para iniciar a aplica√ß√£o
def start_ui():
    app = QApplication(sys.argv)
    
    # Aplica fonte padr√£o da aplica√ß√£o
    app.setStyleSheet("""
        QApplication {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
    """)
    
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    start_ui()